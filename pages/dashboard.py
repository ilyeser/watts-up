# pages/1_Dashboard.py
import streamlit as st
import pandas as pd
from src.analysis import get_greenest_hours
from src.model import train_and_evaluate_model
from src.data_processing import create_training_dataset
from src.predict import predict_tomorrow_co2

def show(df):
    st.title("ðŸ”‹ Dashboard â€“ Heures vertes pour recharger votre VE")

    if df.empty:
        st.error("Aucune donnÃ©e disponible.")
        return

    st.subheader("ðŸ“Š DerniÃ¨res donnÃ©es")
    st.dataframe(df.tail(10)[["date_heure", "consommation", "taux_co2"]].tail(10))

    st.subheader("ðŸŒ± Heures les plus vertes")
    green_df = get_greenest_hours(df)
    st.dataframe(green_df)

    st.subheader("ðŸ“ˆ Taux de CO2")
    st.line_chart(df.set_index("date_heure")[["taux_co2"]])

    st.markdown("---")
    st.header("ðŸ”® PrÃ©diction du taux de COâ‚‚ pour demain")

    features, target = create_training_dataset(df)

    model, mae = train_and_evaluate_model(features, target)

    st.metric(label="Erreur MAE du modÃ¨le", value=f"{mae:.2f} gCOâ‚‚/kWh")

    # tomorrow_forecast = st.number_input("PrÃ©vision de consommation pour demain (MW)", min_value=30000, max_value=100000, value=60000, step=500)
    tomorrow_forecast = df["prevision_j1"].dropna().iloc[-1]
    
    st.info(f"PrÃ©vision de consommation utilisÃ©e pour demain : **{tomorrow_forecast:.0f} MW**")

    if st.button("PrÃ©dire le taux de COâ‚‚ pour demain"):
        tomorrow_datetime = pd.Timestamp.now() + pd.Timedelta(days=1)
        prediction = predict_tomorrow_co2(model, tomorrow_forecast, tomorrow_datetime)
        st.success(f"Taux de COâ‚‚ prÃ©dit pour {tomorrow_datetime.strftime('%A %d %B %Y')} : **{prediction:.2f} gCOâ‚‚/kWh**")
        
        if prediction < 30:
            st.balloons()
            st.markdown("âœ… C'est une excellente journÃ©e pour recharger ton VE !")
        elif prediction < 50:
            st.markdown("ðŸ”µ JournÃ©e correcte pour la recharge.")
        else:
            st.markdown("ðŸ”´ Forte empreinte carbone prÃ©vue, Ã  Ã©viter si possible.")
